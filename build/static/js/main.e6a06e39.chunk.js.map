{"version":3,"sources":["actions/index.js","utils/index.js","reducers/game-reducer.js","reducers/index.js","components/grid-square.js","components/grid-board.js","components/next-block.js","components/score-board.js","components/controls.js","components/message-popup.js","App.js","serviceWorker.js","index.js"],"names":["moveRight","type","moveLeft","rotate","moveDown","pause","resume","restart","gridDefault","array","row","push","col","shapes","randomShape","min","max","length","Math","floor","random","defaultState","grid","shape","rotation","x","y","nextShape","isRunning","score","speed","gameOver","canMoveTo","currentShape","proposedX","proposedY","possibleRow","undefined","gameReducer","state","arguments","action","newRotation","nextRotation","Object","objectSpread","maybeY","obj","blockOffGrid","block","newGrid","toConsumableArray","addBlockToGrid","newState","completedRows","indexOf","splice","unshift","Array","fill","checkRows","reducers","combineReducers","game","GridSquare","classes","concat","this","props","color","react_default","a","createElement","className","Component","GridBoard","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","lastUpdateTime","progressTime","_this$props","blockColor","map","rowArray","square","blockX","blockY","k","grid_square","key","window","requestAnimationFrame","update","bind","time","deltaTime","makeGrid","connect","NextBlock","ScoreBoard","onClick","e","Controls","_this$props2","console","log","MessagePopup","message","isHidden","store","createStore","App","es","grid_board","next_block","score_board","controls","message_popup","addEventListener","keyCode","dispatch","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RASaA,EAAY,WACrB,MAAO,CAAEC,KAPa,eAUbC,EAAW,WACpB,MAAO,CAAED,KAZa,cAebE,EAAS,WAClB,MAAO,CAAEF,KAda,WAiBbG,EAAW,WACpB,MAAO,CAAEH,KAjBa,cAoBbI,EAAQ,WACjB,MAAO,CAAEJ,KA1Ba,UA6BbK,EAAS,WAClB,MAAO,CAAEL,KA7Ba,WAgCbM,EAAU,WACnB,MAAO,CAAEN,KA3Ba,oBCAbO,EAAc,WAKvB,IAJA,IAEMC,EAAQ,GAELC,EAAM,EAAGA,EAJL,GAIiBA,IAAO,CACjCD,EAAME,KAAK,IACX,IAAK,IAAIC,EAAM,EAAGA,EALT,GAKqBA,IAC5BH,EAAMC,GAAKC,KAAK,GAGtB,OAAOF,GAIEI,EAAS,CAElB,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CA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","file":"static/js/main.e6a06e39.chunk.js","sourcesContent":["export const PAUSE      = \"PAUSE\"       // Pause the game\nexport const RESUME     = \"RESUME\"      // Resume a paused game\nexport const MOVE_LEFT  = \"MOVE_LEFT\"   // Move piece left\nexport const MOVE_RIGHT = \"MOVE_RIGHT\"  // Move piece right\nexport const ROTATE     = \"ROTATE\"      // Rotate piece\nexport const MOVE_DOWN  = \"MOVE_DOWN\"   // Move piece down\nexport const GAME_OVER  = \"GAME_OVER\"   // The game is over\nexport const RESTART    = \"RESTART\"     // Restart Game\n\nexport const moveRight = () => {\n    return { type: MOVE_RIGHT }\n}\n  \nexport const moveLeft = () => {\n    return { type: MOVE_LEFT }\n}\n  \nexport const rotate = () => {\n    return { type: ROTATE }\n}\n\nexport const moveDown = () => {\n    return { type: MOVE_DOWN }\n}\n\nexport const pause = () => {\n    return { type: PAUSE }\n}\n\nexport const resume = () => {\n    return { type: RESUME }\n}\n\nexport const restart = () => {\n    return { type: RESTART }\n}","\n// get a random number between min and max\nexport const random = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\n// Returns the default grid\nexport const gridDefault = () => {\n    const rows = 18\n    const cols = 10\n    const array = []\n    // array of 18 arrays of 10 zeros\n    for (let row = 0; row < rows; row++) {\n        array.push([])\n        for (let col = 0; col < cols; col++) {\n          array[row].push(0)\n        }\n    }\n    return array\n}\n\n// Define block shapes and their rotations as arrays.\nexport const shapes = [\n    // none\n    [[[0,0,0,0],\n      [0,0,0,0],\n      [0,0,0,0],\n      [0,0,0,0]]],\n  \n    // I\n    [[[0,0,0,0],\n      [1,1,1,1],\n      [0,0,0,0],\n      [0,0,0,0]],\n  \n     [[0,1,0,0],\n      [0,1,0,0],\n      [0,1,0,0],\n      [0,1,0,0]]],\n  \n    // T\n    [[[0,0,0,0],\n      [1,1,1,0],\n      [0,1,0,0],\n      [0,0,0,0]],\n  \n     [[0,1,0,0],\n      [1,1,0,0],\n      [0,1,0,0],\n      [0,0,0,0]],\n  \n     [[0,1,0,0],\n      [1,1,1,0],\n      [0,0,0,0],\n      [0,0,0,0]],\n  \n     [[0,1,0,0],\n      [0,1,1,0],\n      [0,1,0,0],\n      [0,0,0,0]]],\n  \n    // L\n    [[[0,0,0,0],\n      [1,1,1,0],\n      [1,0,0,0],\n      [0,0,0,0]],\n  \n     [[1,1,0,0],\n      [0,1,0,0],\n      [0,1,0,0],\n      [0,0,0,0]],\n  \n     [[0,0,1,0],\n      [1,1,1,0],\n      [0,0,0,0],\n      [0,0,0,0]],\n  \n     [[0,1,0,0],\n      [0,1,0,0],\n      [0,1,1,0],\n      [0,0,0,0]]],\n  \n    // J\n    [[[1,0,0,0],\n      [1,1,1,0],\n      [0,0,0,0],\n      [0,0,0,0]],\n  \n     [[0,1,1,0],\n      [0,1,0,0],\n      [0,1,0,0],\n      [0,0,0,0]],\n  \n     [[0,0,0,0],\n      [1,1,1,0],\n      [0,0,1,0],\n      [0,0,0,0]],\n  \n     [[0,1,0,0],\n      [0,1,0,0],\n      [1,1,0,0],\n      [0,0,0,0]]],\n  \n    // Z\n    [[[0,0,0,0],\n      [1,1,0,0],\n      [0,1,1,0],\n      [0,0,0,0]],\n  \n     [[0,0,1,0],\n      [0,1,1,0],\n      [0,1,0,0],\n      [0,0,0,0]]],\n  \n    // S\n    [[[0,0,0,0],\n      [0,1,1,0],\n      [1,1,0,0],\n      [0,0,0,0]],\n  \n     [[0,1,0,0],\n      [0,1,1,0],\n      [0,0,1,0],\n      [0,0,0,0]]],\n  \n    // O\n    [[[0,1,1,0],\n      [0,1,1,0],\n      [0,0,0,0],\n      [0,0,0,0]]]\n  ]\n\n// Return the index of a random shape from 1 to the number of items in `shapes`\n// We don't want the first item, which is an empty shape\nexport const randomShape = () => {\n    return random(1, shapes.length - 1)\n}\n\n// Return the default state for the game\nexport const defaultState = () => {\n    return {\n      // Create an empty grid\n      grid: gridDefault(),\n      // Get a new random shape\n      shape: randomShape(),\n      // set rotation of the shape to 0\n      rotation: 0,\n      // set the 'x' position of the shape to 5 and y to -4, which puts the shape in the center of the grid, above the top\n      x: 5,\n      y: -4,\n      // set the index of the next shape to a new random shape\n      nextShape: randomShape(),\n      // Tell the game that it's currently running\n      isRunning: true,\n      // Set the score to 0\n      score: 0,\n      // Set the default speed\n      speed: 1000,\n      // Game isn't over yet\n      gameOver: false\n    }\n}\n\n// Returns the next rotation for a shape\n// rotation can't exceed the last index of the the rotations for the given shape.\nexport const nextRotation = (shape, rotation) => {\n  return (rotation + 1) % shapes[shape].length\n}\n\nexport const canMoveTo = (shape, grid, x, y, rotation) => {\n  const currentShape = shapes[shape][rotation]\n  // Loop through all rows and cols of the **shape**\n  for (let row = 0; row < currentShape.length; row++) {\n      for (let col = 0; col < currentShape[row].length; col++) {\n          // Look for a 1 here\n          if (currentShape[row][col] !== 0) {\n              // x offset on grid\n              const proposedX = col + x\n              // y offset on grid\n              const proposedY = row + y\n              if (proposedY < 0) {\n                  continue\n              }\n              // Get the row on the grid\n              const possibleRow = grid[proposedY]\n              // Check row exists\n              if (possibleRow) {\n                  // Check if this column in the row is undefined, if it's off the edges, 0, and empty\n                  if (possibleRow[proposedX] === undefined || possibleRow[proposedX] !== 0) {\n                      // undefined or not 0 and it's occupied we can't move here.\n                      return false\n                  }\n              } else {\n                  return false\n              }\n          }\n      }\n  }\n  return true\n}\n\n// Adds current shape to grid\nexport const addBlockToGrid = (shape, grid, x, y, rotation) => {\n  // At this point the game is not over\n  let blockOffGrid = false\n  const block = shapes[shape][rotation]\n  const newGrid = [ ...grid ]\n  for (let row = 0; row < block.length; row++) {\n    for (let col = 0; col < block[row].length; col++) {\n      if (block[row][col]) {\n        const yIndex = row + y\n        // If the yIndex is less than 0 part of the block\n        // is off the top of the screen and the game is over\n        if (yIndex < 0) {\n          blockOffGrid = true\n        } else {\n          newGrid[row + y][col + x] = shape\n        }\n      }\n    }\n  }\n  // Return both the newGrid and the gameOver bool                                                \n  return { grid: newGrid, gameOver: blockOffGrid }\n}\n\nexport const checkRows = (grid) => {\n  // Points increase for each row completed\n  // i.e. 40 points for completing one row, 100 points for two rows\n  const points = [0, 40, 100, 300, 1200]\n  let completedRows = 0\n  for (let row = 0; row < grid.length; row++) {\n    // No empty cells means it can't find a 0, so the row must be complete!\n    if (grid[row].indexOf(0) === -1) {\n      completedRows += 1\n      // Remove the row and add a new empty one at the top\n      grid.splice(row, 1)\n      grid.unshift(Array(10).fill(0))\n    }\n  }\n  return points[completedRows]\n}","import {\n    MOVE_RIGHT, MOVE_LEFT, MOVE_DOWN, ROTATE,\n    PAUSE, RESUME, RESTART, GAME_OVER\n  } from '../actions'\n  \nimport {\n    defaultState,\n    nextRotation,\n    canMoveTo,\n    addBlockToGrid,\n    checkRows,\n    randomShape\n  } from '../utils'\n\nconst gameReducer = (state = defaultState(), action) => {\n  const { shape, grid, x, y, rotation, nextShape, score, isRunning } = state\n\n    switch(action.type) {\n      case ROTATE:\n        const newRotation = nextRotation(shape, rotation)\n        if (canMoveTo(shape, grid, x, y, newRotation)) {\n            return { ...state, rotation: newRotation }\n        }\n        return state\n  \n      case MOVE_RIGHT:\n        if (canMoveTo(shape, grid, x + 1, y, rotation)) {\n          return { ...state, x: x + 1 }\n        }\n        return state\n  \n      case MOVE_LEFT:\n        // subtract 1 from the x and check if this new position is possible by calling `canMoveTo()\n        if (canMoveTo(shape, grid, x - 1, y, rotation)) {\n          return { ...state, x: x - 1 }\n        }\n        return state\n  \n      case MOVE_DOWN:\n        // Get the next potential Y position\n        const maybeY = y + 1\n        \n          // Check if the current block can move here\n          if (canMoveTo(shape, grid, x, maybeY, rotation)) {\n              // If so move down don't place the block\n              return { ...state, y: maybeY }\n          }\n        \n          // If not place the block\n          // (this returns an object with a grid and gameover bool)\n          const obj = addBlockToGrid(shape, grid, x, y, rotation)\n          const newGrid = obj.grid\n          const gameOver = obj.gameOver\n        \n          if (gameOver) {\n            // Game Over\n            const newState = { ...state }\n            newState.shape = 0\n            newState.grid = newGrid\n            return { ...state, gameOver: true }\n          }\n        \n          // reset somethings to start a new shape/block\n          const newState = defaultState()\n          newState.grid = newGrid\n          newState.shape = nextShape\n          newState.score = score\n          newState.isRunning = isRunning\n        \n          // TODO: Check and Set level\n          // Score increases decrease interval\n          newState.score = score + checkRows(newGrid)\n        \n          return newState\n  \n      case RESUME:\n  \n        return { ...state, isRunning: true }\n  \n      case PAUSE:\n  \n        return { ...state, isRunning: false }\n  \n      case GAME_OVER:\n  \n        return state\n  \n      case RESTART:\n  \n        return defaultState()\n  \n      default:\n        return state\n    }\n}\n  \nexport default gameReducer","import { combineReducers } from 'redux'\nimport gameReducer from './game-reducer'\n\n// The state handled by `gameReducer` will be stored with the property name `game` on the Redux store.\nconst reducers = combineReducers({\n  game: gameReducer\n})\n\nexport default reducers","import React, { Component } from 'react'\n\n// Represents a grid square with a color\n\nclass GridSquare extends Component {\n    render() {\n        const classes = `grid-square color-${this.props.color}`\n        return <div className={classes} />\n    }\n}\n\nexport default GridSquare","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport GridSquare from './grid-square'\nimport { moveDown } from '../actions'\n// Get Shapes from utils\nimport { shapes } from '../utils'\n\n// Represents a 10 x 18 grid of grid squares\n\nclass GridBoard extends Component {\n    constructor(props) {\n      super(props)\n\n      this.lastUpdateTime = 0\n      this.progressTime = 0\n    }\n  \n    // generates an array of 18 rows, each containing 10 GridSquares.\n    makeGrid() {\n        // collect properties mapped to props from state.\n        const { grid, shape, rotation, x, y } = this.props\n        // get the block which is the current shape the player is controlling\n        const block = shapes[shape][rotation]\n        const blockColor = shape\n        // map rows\n        return grid.map((rowArray, row) => {\n          // map columns\n          return rowArray.map((square, col) => {\n            // Find the block x and y on the shape grid\n            // By subtracting the x and y from the col and the row we get the position of the upper left corner of the block array as if it was superimposed over the main grid\n            const blockX = col - x\n            const blockY = row - y\n            let color = square\n            // Map current falling block to grid.\n            // For any squares that fall on the grid we need to look at the block array and see if there is a 1 in this case we use the block color. \n            if (blockX >= 0 && blockX < block.length && blockY >= 0 && blockY < block.length) {\n              color = block[blockY][blockX] === 0 ? color : blockColor\n            }\n            // Generate a unique key for every block\n            const k = row * grid[0].length + col;\n            // Generate a grid square\n            return <GridSquare\n                    key={k}\n                    square={square}\n                    color={color}>{square}\n                  </GridSquare>\n          })\n        })\n    }\n\n    componentDidMount() {\n      window.requestAnimationFrame(this.update.bind(this))\n    }\n      \n    // Handle game updates\n    update(time) {\n      // If the game is is running we want to request a callback at the next animation frame.\n      window.requestAnimationFrame(this.update.bind(this))\n      if (!this.props.isRunning) {\n        return\n      }\n    \n      // If lastUpdateTime not been set, set it to the current time.\n      if (!this.lastUpdateTime) {\n        this.lastUpdateTime = time\n      }\n    \n      // Calculate delta time and progress time\n      const deltaTime = time - this.lastUpdateTime\n      this.progressTime += deltaTime\n    \n      // If the progress time is greater than speed move the block down\n      if (this.progressTime > this.props.speed) {\n        this.props.moveDown()\n        this.progressTime = 0\n      }\n    \n      // set the last update time.\n      this.lastUpdateTime = time\n    }\n\n    render () {\n        return (\n            <div className = 'grid-board'>\n                {this.makeGrid()}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      grid: state.game.grid,\n      shape: state.game.shape,\n      rotation: state.game.rotation,\n      x: state.game.x,\n      y: state.game.y,\n      speed: state.game.speed,\n      isRunning: state.game.isRunning\n    }\n}\n\n// Map Dipatch to Props\nconst mapDispatchToProps = () => {\n    return {\n      moveDown\n    }\n}\n\n// Connect the component\nexport default connect(mapStateToProps, mapDispatchToProps())(GridBoard)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport GridSquare from './grid-square'\nimport { shapes } from '../utils'\n\n// Draws the \"next\" block view showing the next block to drop\nclass NextBlock extends Component {\n\n    makeGrid() {\n        // deconstruct shape\n        const { shape } = this.props\n        // get the array for this shape first rotation\n        const block = shapes[shape][0]\n        // get the empty shape\n        const box = shapes[0][0]        \n      \n        // Map the block to the grid\n        return box.map((rowArray, row) => {\n          return rowArray.map((square, col) => {\n            // If there is a 1 use the shape index\n            const color = block[row][col] === 0 ? 0 : shape\n            return <GridSquare key={`${row}${col}`} color={color} />\n          })\n        })\n    }\n\n    render () {\n        return (\n            <div className=\"next-block\">\n            {this.makeGrid()}</div>\n        )\n    }\n}\n\n// Map State to props\nconst mapStateToProps = (state) => {\n    return {\n      // Return nextShape as shape\n      shape: state.game.nextShape\n    }\n}\n\nexport default connect(mapStateToProps)(NextBlock)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { pause, resume, restart } from '../actions'\n\nclass ScoreBoard extends Component {\n\n    render() {\n        const { isRunning, score, resume, pause, restart, gameOver } = this.props\n\n        return (\n            <div className=\"score-board\">\n                <div>Score:{ score }</div>\n                <div>Level: 1</div>\n\n                <button className=\"score-board-button\" onClick={(e) => {\n                    if (gameOver) { return }\n                    isRunning ? pause() : resume()\n                }}>{isRunning ? \"Pause\" : \"Resume\"}</button>\n\n                <button className=\"score-board-button\" onClick={(e) => {\n                    restart()\n                }}>Restart</button>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      score: state.game.score,\n      isRunning: state.game.isRunning,\n      gameOver: state.game.gameOver\n    }\n}\n\nconst mapDispatchToProps = () => {\n    return {\n      pause,\n      resume,\n      restart\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps())(ScoreBoard)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { moveDown, moveLeft, moveRight, rotate } from '../actions'\n\nclass Controls extends Component {\n\n  handleKeyPress(e) {\n    const { isRunning, gameOver } = this.props\n    if (e.key === 'ArrowLeft') {\n      if (!isRunning || gameOver) { return }\n      this.props.moveLeft()\n    }\n\n    if (e.key === 'ArrowRight') {\n      if (!isRunning || gameOver) { return }\n      this.props.moveRight()\n    }\n\n    if (e.key === 'ArrowDown') {\n      if (!isRunning || gameOver) { return }\n      this.props.moveDown()\n    }\n\n    // rotate if space key is pressed\n    if (e.key === 'Space') {\n      if (!isRunning || gameOver) { return }\n      this.props.rotate()\n    }\n  }\n\n  render() {\n\n    const { isRunning, gameOver } = this.props\n\n    return (\n      <div className=\"controls\">\n        {/* left */}\n        <button className=\"control-button\" onClick={(e) => {\n          console.log(isRunning, gameOver)\n          if (!isRunning || gameOver) { return }\n          this.props.moveLeft()\n        }}>Left</button>\n\n        {/* right */}\n        <button className=\"control-button\" onClick={(e) => {\n          if (!isRunning || gameOver) { return }\n          this.props.moveRight()\n        }}>Right</button>\n\n        {/* rotate */}\n        <button className=\"control-button\" onClick={(e) => {\n          if (!isRunning || gameOver) { return }\n          this.props.rotate()\n        }}>Rotate</button>\n\n        {/* down */}\n        <button className=\"control-button\" onClick={(e) => {\n           if (!isRunning || gameOver) { return }\n           this.props.moveDown()\n        }}>Down</button>\n\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n      isRunning: state.game.isRunning,\n      gameOver: state.game.gameOver\n  }\n}\n\nconst mapDispatchToProps = () => {\n  return {\n      moveRight,\n      moveLeft,\n      moveDown,\n      rotate\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps())(Controls)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\n// Displays a message\nclass MessagePopup extends Component {\n\n  render() {\n    const { gameOver, isRunning } = this.props\n    let message = ''\n    let isHidden = 'hidden'\n\n    // If the game is over, show the popup saying \"Game Over\"\n    if (gameOver) {\n      message = 'Game Over'\n      isHidden = ''\n    // If the game isn't running, it must be paused, so show the popup saying \"Paused\"\n    } else if (!isRunning) {\n      message = 'Paused'\n      isHidden = ''\n    // Default message, will still be hidden\n    } else {\n      message = '???'\n    }\n\n    return (\n      <div className={`message-popup ${isHidden}`}>\n        <h1>{message}</h1>\n        <p></p>\n      </div>\n    )\n}\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    gameOver: state.game.gameOver,\n    isRunning: state.game.isRunning\n  }\n}\n\nconst mapDispatchToProps = () => {\n  return { }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps())(MessagePopup)","import React, { Component } from 'react';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\n\nimport './App.css';\n\nimport reducers from './reducers'\nimport GridBoard from './components/grid-board'\nimport NextBlock from './components/next-block'\nimport ScoreBoard from './components/score-board'\nimport Controls from './components/controls'\nimport MessagePopup from './components/message-popup'\nimport { moveDown, moveLeft, moveRight, rotate } from './actions'\n\nconst store = createStore(reducers)\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1 className=\"App-title\">Tetris Redux</h1>\n          </header>\n          <GridBoard />\n          <NextBlock />\n          <ScoreBoard />\n          <Controls />\n          <MessagePopup />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n\nwindow.addEventListener('keydown', (e) => {\n\n  console.log(e.keyCode)\n\n  switch(e.keyCode) {\n    case 40:\n      // down\n      store.dispatch(moveDown())\n      break\n    case 37:\n      // left\n      store.dispatch(moveLeft())\n      break\n    case 39:\n      // right\n      store.dispatch(moveRight())\n      break\n    case 32:\n      // right\n      store.dispatch(rotate())\n      break\n  }\n  \n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}